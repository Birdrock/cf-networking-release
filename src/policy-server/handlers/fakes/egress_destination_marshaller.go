// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"policy-server/handlers"
	"policy-server/store"
	"sync"
)

type EgressDestinationMarshaller struct {
	AsBytesStub        func(egressDestinations []store.EgressDestination) ([]byte, error)
	asBytesMutex       sync.RWMutex
	asBytesArgsForCall []struct {
		egressDestinations []store.EgressDestination
	}
	asBytesReturns struct {
		result1 []byte
		result2 error
	}
	asBytesReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	AsEgressDestinationsStub        func([]byte) ([]store.EgressDestination, error)
	asEgressDestinationsMutex       sync.RWMutex
	asEgressDestinationsArgsForCall []struct {
		arg1 []byte
	}
	asEgressDestinationsReturns struct {
		result1 []store.EgressDestination
		result2 error
	}
	asEgressDestinationsReturnsOnCall map[int]struct {
		result1 []store.EgressDestination
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *EgressDestinationMarshaller) AsBytes(egressDestinations []store.EgressDestination) ([]byte, error) {
	var egressDestinationsCopy []store.EgressDestination
	if egressDestinations != nil {
		egressDestinationsCopy = make([]store.EgressDestination, len(egressDestinations))
		copy(egressDestinationsCopy, egressDestinations)
	}
	fake.asBytesMutex.Lock()
	ret, specificReturn := fake.asBytesReturnsOnCall[len(fake.asBytesArgsForCall)]
	fake.asBytesArgsForCall = append(fake.asBytesArgsForCall, struct {
		egressDestinations []store.EgressDestination
	}{egressDestinationsCopy})
	fake.recordInvocation("AsBytes", []interface{}{egressDestinationsCopy})
	fake.asBytesMutex.Unlock()
	if fake.AsBytesStub != nil {
		return fake.AsBytesStub(egressDestinations)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.asBytesReturns.result1, fake.asBytesReturns.result2
}

func (fake *EgressDestinationMarshaller) AsBytesCallCount() int {
	fake.asBytesMutex.RLock()
	defer fake.asBytesMutex.RUnlock()
	return len(fake.asBytesArgsForCall)
}

func (fake *EgressDestinationMarshaller) AsBytesArgsForCall(i int) []store.EgressDestination {
	fake.asBytesMutex.RLock()
	defer fake.asBytesMutex.RUnlock()
	return fake.asBytesArgsForCall[i].egressDestinations
}

func (fake *EgressDestinationMarshaller) AsBytesReturns(result1 []byte, result2 error) {
	fake.AsBytesStub = nil
	fake.asBytesReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *EgressDestinationMarshaller) AsBytesReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.AsBytesStub = nil
	if fake.asBytesReturnsOnCall == nil {
		fake.asBytesReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.asBytesReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *EgressDestinationMarshaller) AsEgressDestinations(arg1 []byte) ([]store.EgressDestination, error) {
	var arg1Copy []byte
	if arg1 != nil {
		arg1Copy = make([]byte, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.asEgressDestinationsMutex.Lock()
	ret, specificReturn := fake.asEgressDestinationsReturnsOnCall[len(fake.asEgressDestinationsArgsForCall)]
	fake.asEgressDestinationsArgsForCall = append(fake.asEgressDestinationsArgsForCall, struct {
		arg1 []byte
	}{arg1Copy})
	fake.recordInvocation("AsEgressDestinations", []interface{}{arg1Copy})
	fake.asEgressDestinationsMutex.Unlock()
	if fake.AsEgressDestinationsStub != nil {
		return fake.AsEgressDestinationsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.asEgressDestinationsReturns.result1, fake.asEgressDestinationsReturns.result2
}

func (fake *EgressDestinationMarshaller) AsEgressDestinationsCallCount() int {
	fake.asEgressDestinationsMutex.RLock()
	defer fake.asEgressDestinationsMutex.RUnlock()
	return len(fake.asEgressDestinationsArgsForCall)
}

func (fake *EgressDestinationMarshaller) AsEgressDestinationsArgsForCall(i int) []byte {
	fake.asEgressDestinationsMutex.RLock()
	defer fake.asEgressDestinationsMutex.RUnlock()
	return fake.asEgressDestinationsArgsForCall[i].arg1
}

func (fake *EgressDestinationMarshaller) AsEgressDestinationsReturns(result1 []store.EgressDestination, result2 error) {
	fake.AsEgressDestinationsStub = nil
	fake.asEgressDestinationsReturns = struct {
		result1 []store.EgressDestination
		result2 error
	}{result1, result2}
}

func (fake *EgressDestinationMarshaller) AsEgressDestinationsReturnsOnCall(i int, result1 []store.EgressDestination, result2 error) {
	fake.AsEgressDestinationsStub = nil
	if fake.asEgressDestinationsReturnsOnCall == nil {
		fake.asEgressDestinationsReturnsOnCall = make(map[int]struct {
			result1 []store.EgressDestination
			result2 error
		})
	}
	fake.asEgressDestinationsReturnsOnCall[i] = struct {
		result1 []store.EgressDestination
		result2 error
	}{result1, result2}
}

func (fake *EgressDestinationMarshaller) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.asBytesMutex.RLock()
	defer fake.asBytesMutex.RUnlock()
	fake.asEgressDestinationsMutex.RLock()
	defer fake.asEgressDestinationsMutex.RUnlock()
	return fake.invocations
}

func (fake *EgressDestinationMarshaller) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ handlers.EgressDestinationMarshaller = new(EgressDestinationMarshaller)
