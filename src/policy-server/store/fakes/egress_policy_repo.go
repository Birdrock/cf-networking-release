// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"policy-server/store"
	"sync"

	"code.cloudfoundry.org/cf-networking-helpers/db"
)

type EgressPolicyRepo struct {
	CreateAppStub        func(tx db.Transaction, sourceTerminalGUID string, appGUID string) error
	createAppMutex       sync.RWMutex
	createAppArgsForCall []struct {
		tx                 db.Transaction
		sourceTerminalGUID string
		appGUID            string
	}
	createAppReturns struct {
		result1 error
	}
	createAppReturnsOnCall map[int]struct {
		result1 error
	}
	CreateEgressPolicyStub        func(tx db.Transaction, sourceTerminalGUID, destinationTerminalGUID, appLifecycle string) (string, error)
	createEgressPolicyMutex       sync.RWMutex
	createEgressPolicyArgsForCall []struct {
		tx                      db.Transaction
		sourceTerminalGUID      string
		destinationTerminalGUID string
		appLifecycle            string
	}
	createEgressPolicyReturns struct {
		result1 string
		result2 error
	}
	createEgressPolicyReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	CreateDefaultStub        func(tx db.Transaction, sourceTerminalGUID string) error
	createDefaultMutex       sync.RWMutex
	createDefaultArgsForCall []struct {
		tx                 db.Transaction
		sourceTerminalGUID string
	}
	createDefaultReturns struct {
		result1 error
	}
	createDefaultReturnsOnCall map[int]struct {
		result1 error
	}
	CreateSpaceStub        func(tx db.Transaction, sourceTerminalGUID string, spaceGUID string) error
	createSpaceMutex       sync.RWMutex
	createSpaceArgsForCall []struct {
		tx                 db.Transaction
		sourceTerminalGUID string
		spaceGUID          string
	}
	createSpaceReturns struct {
		result1 error
	}
	createSpaceReturnsOnCall map[int]struct {
		result1 error
	}
	GetTerminalByAppGUIDStub        func(tx db.Transaction, appGUID string) (string, error)
	getTerminalByAppGUIDMutex       sync.RWMutex
	getTerminalByAppGUIDArgsForCall []struct {
		tx      db.Transaction
		appGUID string
	}
	getTerminalByAppGUIDReturns struct {
		result1 string
		result2 error
	}
	getTerminalByAppGUIDReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	GetTerminalBySpaceGUIDStub        func(tx db.Transaction, appGUID string) (string, error)
	getTerminalBySpaceGUIDMutex       sync.RWMutex
	getTerminalBySpaceGUIDArgsForCall []struct {
		tx      db.Transaction
		appGUID string
	}
	getTerminalBySpaceGUIDReturns struct {
		result1 string
		result2 error
	}
	getTerminalBySpaceGUIDReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	GetAllPoliciesStub        func() ([]store.EgressPolicy, error)
	getAllPoliciesMutex       sync.RWMutex
	getAllPoliciesArgsForCall []struct{}
	getAllPoliciesReturns     struct {
		result1 []store.EgressPolicy
		result2 error
	}
	getAllPoliciesReturnsOnCall map[int]struct {
		result1 []store.EgressPolicy
		result2 error
	}
	GetByFilterStub        func(sourceIds, sourceTypes, destinationIds, destinationNames, appLifecycles []string) ([]store.EgressPolicy, error)
	getByFilterMutex       sync.RWMutex
	getByFilterArgsForCall []struct {
		sourceIds        []string
		sourceTypes      []string
		destinationIds   []string
		destinationNames []string
		appLifecycles    []string
	}
	getByFilterReturns struct {
		result1 []store.EgressPolicy
		result2 error
	}
	getByFilterReturnsOnCall map[int]struct {
		result1 []store.EgressPolicy
		result2 error
	}
	GetBySourceGuidsAndDefaultsStub        func(ids []string) ([]store.EgressPolicy, error)
	getBySourceGuidsAndDefaultsMutex       sync.RWMutex
	getBySourceGuidsAndDefaultsArgsForCall []struct {
		ids []string
	}
	getBySourceGuidsAndDefaultsReturns struct {
		result1 []store.EgressPolicy
		result2 error
	}
	getBySourceGuidsAndDefaultsReturnsOnCall map[int]struct {
		result1 []store.EgressPolicy
		result2 error
	}
	GetByGUIDStub        func(tx db.Transaction, ids ...string) ([]store.EgressPolicy, error)
	getByGUIDMutex       sync.RWMutex
	getByGUIDArgsForCall []struct {
		tx  db.Transaction
		ids []string
	}
	getByGUIDReturns struct {
		result1 []store.EgressPolicy
		result2 error
	}
	getByGUIDReturnsOnCall map[int]struct {
		result1 []store.EgressPolicy
		result2 error
	}
	DeleteEgressPolicyStub        func(tx db.Transaction, egressPolicyGUID string) error
	deleteEgressPolicyMutex       sync.RWMutex
	deleteEgressPolicyArgsForCall []struct {
		tx               db.Transaction
		egressPolicyGUID string
	}
	deleteEgressPolicyReturns struct {
		result1 error
	}
	deleteEgressPolicyReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteAppStub        func(tx db.Transaction, terminalID string) error
	deleteAppMutex       sync.RWMutex
	deleteAppArgsForCall []struct {
		tx         db.Transaction
		terminalID string
	}
	deleteAppReturns struct {
		result1 error
	}
	deleteAppReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteSpaceStub        func(tx db.Transaction, spaceID string) error
	deleteSpaceMutex       sync.RWMutex
	deleteSpaceArgsForCall []struct {
		tx      db.Transaction
		spaceID string
	}
	deleteSpaceReturns struct {
		result1 error
	}
	deleteSpaceReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteDefaultStub        func(tx db.Transaction, defaultID string) error
	deleteDefaultMutex       sync.RWMutex
	deleteDefaultArgsForCall []struct {
		tx        db.Transaction
		defaultID string
	}
	deleteDefaultReturns struct {
		result1 error
	}
	deleteDefaultReturnsOnCall map[int]struct {
		result1 error
	}
	IsTerminalInUseStub        func(tx db.Transaction, terminalGUID string) (bool, error)
	isTerminalInUseMutex       sync.RWMutex
	isTerminalInUseArgsForCall []struct {
		tx           db.Transaction
		terminalGUID string
	}
	isTerminalInUseReturns struct {
		result1 bool
		result2 error
	}
	isTerminalInUseReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *EgressPolicyRepo) CreateApp(tx db.Transaction, sourceTerminalGUID string, appGUID string) error {
	fake.createAppMutex.Lock()
	ret, specificReturn := fake.createAppReturnsOnCall[len(fake.createAppArgsForCall)]
	fake.createAppArgsForCall = append(fake.createAppArgsForCall, struct {
		tx                 db.Transaction
		sourceTerminalGUID string
		appGUID            string
	}{tx, sourceTerminalGUID, appGUID})
	fake.recordInvocation("CreateApp", []interface{}{tx, sourceTerminalGUID, appGUID})
	fake.createAppMutex.Unlock()
	if fake.CreateAppStub != nil {
		return fake.CreateAppStub(tx, sourceTerminalGUID, appGUID)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.createAppReturns.result1
}

func (fake *EgressPolicyRepo) CreateAppCallCount() int {
	fake.createAppMutex.RLock()
	defer fake.createAppMutex.RUnlock()
	return len(fake.createAppArgsForCall)
}

func (fake *EgressPolicyRepo) CreateAppArgsForCall(i int) (db.Transaction, string, string) {
	fake.createAppMutex.RLock()
	defer fake.createAppMutex.RUnlock()
	return fake.createAppArgsForCall[i].tx, fake.createAppArgsForCall[i].sourceTerminalGUID, fake.createAppArgsForCall[i].appGUID
}

func (fake *EgressPolicyRepo) CreateAppReturns(result1 error) {
	fake.CreateAppStub = nil
	fake.createAppReturns = struct {
		result1 error
	}{result1}
}

func (fake *EgressPolicyRepo) CreateAppReturnsOnCall(i int, result1 error) {
	fake.CreateAppStub = nil
	if fake.createAppReturnsOnCall == nil {
		fake.createAppReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.createAppReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *EgressPolicyRepo) CreateEgressPolicy(tx db.Transaction, sourceTerminalGUID string, destinationTerminalGUID string, appLifecycle string) (string, error) {
	fake.createEgressPolicyMutex.Lock()
	ret, specificReturn := fake.createEgressPolicyReturnsOnCall[len(fake.createEgressPolicyArgsForCall)]
	fake.createEgressPolicyArgsForCall = append(fake.createEgressPolicyArgsForCall, struct {
		tx                      db.Transaction
		sourceTerminalGUID      string
		destinationTerminalGUID string
		appLifecycle            string
	}{tx, sourceTerminalGUID, destinationTerminalGUID, appLifecycle})
	fake.recordInvocation("CreateEgressPolicy", []interface{}{tx, sourceTerminalGUID, destinationTerminalGUID, appLifecycle})
	fake.createEgressPolicyMutex.Unlock()
	if fake.CreateEgressPolicyStub != nil {
		return fake.CreateEgressPolicyStub(tx, sourceTerminalGUID, destinationTerminalGUID, appLifecycle)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createEgressPolicyReturns.result1, fake.createEgressPolicyReturns.result2
}

func (fake *EgressPolicyRepo) CreateEgressPolicyCallCount() int {
	fake.createEgressPolicyMutex.RLock()
	defer fake.createEgressPolicyMutex.RUnlock()
	return len(fake.createEgressPolicyArgsForCall)
}

func (fake *EgressPolicyRepo) CreateEgressPolicyArgsForCall(i int) (db.Transaction, string, string, string) {
	fake.createEgressPolicyMutex.RLock()
	defer fake.createEgressPolicyMutex.RUnlock()
	return fake.createEgressPolicyArgsForCall[i].tx, fake.createEgressPolicyArgsForCall[i].sourceTerminalGUID, fake.createEgressPolicyArgsForCall[i].destinationTerminalGUID, fake.createEgressPolicyArgsForCall[i].appLifecycle
}

func (fake *EgressPolicyRepo) CreateEgressPolicyReturns(result1 string, result2 error) {
	fake.CreateEgressPolicyStub = nil
	fake.createEgressPolicyReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *EgressPolicyRepo) CreateEgressPolicyReturnsOnCall(i int, result1 string, result2 error) {
	fake.CreateEgressPolicyStub = nil
	if fake.createEgressPolicyReturnsOnCall == nil {
		fake.createEgressPolicyReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.createEgressPolicyReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *EgressPolicyRepo) CreateDefault(tx db.Transaction, sourceTerminalGUID string) error {
	fake.createDefaultMutex.Lock()
	ret, specificReturn := fake.createDefaultReturnsOnCall[len(fake.createDefaultArgsForCall)]
	fake.createDefaultArgsForCall = append(fake.createDefaultArgsForCall, struct {
		tx                 db.Transaction
		sourceTerminalGUID string
	}{tx, sourceTerminalGUID})
	fake.recordInvocation("CreateDefault", []interface{}{tx, sourceTerminalGUID})
	fake.createDefaultMutex.Unlock()
	if fake.CreateDefaultStub != nil {
		return fake.CreateDefaultStub(tx, sourceTerminalGUID)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.createDefaultReturns.result1
}

func (fake *EgressPolicyRepo) CreateDefaultCallCount() int {
	fake.createDefaultMutex.RLock()
	defer fake.createDefaultMutex.RUnlock()
	return len(fake.createDefaultArgsForCall)
}

func (fake *EgressPolicyRepo) CreateDefaultArgsForCall(i int) (db.Transaction, string) {
	fake.createDefaultMutex.RLock()
	defer fake.createDefaultMutex.RUnlock()
	return fake.createDefaultArgsForCall[i].tx, fake.createDefaultArgsForCall[i].sourceTerminalGUID
}

func (fake *EgressPolicyRepo) CreateDefaultReturns(result1 error) {
	fake.CreateDefaultStub = nil
	fake.createDefaultReturns = struct {
		result1 error
	}{result1}
}

func (fake *EgressPolicyRepo) CreateDefaultReturnsOnCall(i int, result1 error) {
	fake.CreateDefaultStub = nil
	if fake.createDefaultReturnsOnCall == nil {
		fake.createDefaultReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.createDefaultReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *EgressPolicyRepo) CreateSpace(tx db.Transaction, sourceTerminalGUID string, spaceGUID string) error {
	fake.createSpaceMutex.Lock()
	ret, specificReturn := fake.createSpaceReturnsOnCall[len(fake.createSpaceArgsForCall)]
	fake.createSpaceArgsForCall = append(fake.createSpaceArgsForCall, struct {
		tx                 db.Transaction
		sourceTerminalGUID string
		spaceGUID          string
	}{tx, sourceTerminalGUID, spaceGUID})
	fake.recordInvocation("CreateSpace", []interface{}{tx, sourceTerminalGUID, spaceGUID})
	fake.createSpaceMutex.Unlock()
	if fake.CreateSpaceStub != nil {
		return fake.CreateSpaceStub(tx, sourceTerminalGUID, spaceGUID)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.createSpaceReturns.result1
}

func (fake *EgressPolicyRepo) CreateSpaceCallCount() int {
	fake.createSpaceMutex.RLock()
	defer fake.createSpaceMutex.RUnlock()
	return len(fake.createSpaceArgsForCall)
}

func (fake *EgressPolicyRepo) CreateSpaceArgsForCall(i int) (db.Transaction, string, string) {
	fake.createSpaceMutex.RLock()
	defer fake.createSpaceMutex.RUnlock()
	return fake.createSpaceArgsForCall[i].tx, fake.createSpaceArgsForCall[i].sourceTerminalGUID, fake.createSpaceArgsForCall[i].spaceGUID
}

func (fake *EgressPolicyRepo) CreateSpaceReturns(result1 error) {
	fake.CreateSpaceStub = nil
	fake.createSpaceReturns = struct {
		result1 error
	}{result1}
}

func (fake *EgressPolicyRepo) CreateSpaceReturnsOnCall(i int, result1 error) {
	fake.CreateSpaceStub = nil
	if fake.createSpaceReturnsOnCall == nil {
		fake.createSpaceReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.createSpaceReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *EgressPolicyRepo) GetTerminalByAppGUID(tx db.Transaction, appGUID string) (string, error) {
	fake.getTerminalByAppGUIDMutex.Lock()
	ret, specificReturn := fake.getTerminalByAppGUIDReturnsOnCall[len(fake.getTerminalByAppGUIDArgsForCall)]
	fake.getTerminalByAppGUIDArgsForCall = append(fake.getTerminalByAppGUIDArgsForCall, struct {
		tx      db.Transaction
		appGUID string
	}{tx, appGUID})
	fake.recordInvocation("GetTerminalByAppGUID", []interface{}{tx, appGUID})
	fake.getTerminalByAppGUIDMutex.Unlock()
	if fake.GetTerminalByAppGUIDStub != nil {
		return fake.GetTerminalByAppGUIDStub(tx, appGUID)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getTerminalByAppGUIDReturns.result1, fake.getTerminalByAppGUIDReturns.result2
}

func (fake *EgressPolicyRepo) GetTerminalByAppGUIDCallCount() int {
	fake.getTerminalByAppGUIDMutex.RLock()
	defer fake.getTerminalByAppGUIDMutex.RUnlock()
	return len(fake.getTerminalByAppGUIDArgsForCall)
}

func (fake *EgressPolicyRepo) GetTerminalByAppGUIDArgsForCall(i int) (db.Transaction, string) {
	fake.getTerminalByAppGUIDMutex.RLock()
	defer fake.getTerminalByAppGUIDMutex.RUnlock()
	return fake.getTerminalByAppGUIDArgsForCall[i].tx, fake.getTerminalByAppGUIDArgsForCall[i].appGUID
}

func (fake *EgressPolicyRepo) GetTerminalByAppGUIDReturns(result1 string, result2 error) {
	fake.GetTerminalByAppGUIDStub = nil
	fake.getTerminalByAppGUIDReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *EgressPolicyRepo) GetTerminalByAppGUIDReturnsOnCall(i int, result1 string, result2 error) {
	fake.GetTerminalByAppGUIDStub = nil
	if fake.getTerminalByAppGUIDReturnsOnCall == nil {
		fake.getTerminalByAppGUIDReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.getTerminalByAppGUIDReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *EgressPolicyRepo) GetTerminalBySpaceGUID(tx db.Transaction, appGUID string) (string, error) {
	fake.getTerminalBySpaceGUIDMutex.Lock()
	ret, specificReturn := fake.getTerminalBySpaceGUIDReturnsOnCall[len(fake.getTerminalBySpaceGUIDArgsForCall)]
	fake.getTerminalBySpaceGUIDArgsForCall = append(fake.getTerminalBySpaceGUIDArgsForCall, struct {
		tx      db.Transaction
		appGUID string
	}{tx, appGUID})
	fake.recordInvocation("GetTerminalBySpaceGUID", []interface{}{tx, appGUID})
	fake.getTerminalBySpaceGUIDMutex.Unlock()
	if fake.GetTerminalBySpaceGUIDStub != nil {
		return fake.GetTerminalBySpaceGUIDStub(tx, appGUID)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getTerminalBySpaceGUIDReturns.result1, fake.getTerminalBySpaceGUIDReturns.result2
}

func (fake *EgressPolicyRepo) GetTerminalBySpaceGUIDCallCount() int {
	fake.getTerminalBySpaceGUIDMutex.RLock()
	defer fake.getTerminalBySpaceGUIDMutex.RUnlock()
	return len(fake.getTerminalBySpaceGUIDArgsForCall)
}

func (fake *EgressPolicyRepo) GetTerminalBySpaceGUIDArgsForCall(i int) (db.Transaction, string) {
	fake.getTerminalBySpaceGUIDMutex.RLock()
	defer fake.getTerminalBySpaceGUIDMutex.RUnlock()
	return fake.getTerminalBySpaceGUIDArgsForCall[i].tx, fake.getTerminalBySpaceGUIDArgsForCall[i].appGUID
}

func (fake *EgressPolicyRepo) GetTerminalBySpaceGUIDReturns(result1 string, result2 error) {
	fake.GetTerminalBySpaceGUIDStub = nil
	fake.getTerminalBySpaceGUIDReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *EgressPolicyRepo) GetTerminalBySpaceGUIDReturnsOnCall(i int, result1 string, result2 error) {
	fake.GetTerminalBySpaceGUIDStub = nil
	if fake.getTerminalBySpaceGUIDReturnsOnCall == nil {
		fake.getTerminalBySpaceGUIDReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.getTerminalBySpaceGUIDReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *EgressPolicyRepo) GetAllPolicies() ([]store.EgressPolicy, error) {
	fake.getAllPoliciesMutex.Lock()
	ret, specificReturn := fake.getAllPoliciesReturnsOnCall[len(fake.getAllPoliciesArgsForCall)]
	fake.getAllPoliciesArgsForCall = append(fake.getAllPoliciesArgsForCall, struct{}{})
	fake.recordInvocation("GetAllPolicies", []interface{}{})
	fake.getAllPoliciesMutex.Unlock()
	if fake.GetAllPoliciesStub != nil {
		return fake.GetAllPoliciesStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getAllPoliciesReturns.result1, fake.getAllPoliciesReturns.result2
}

func (fake *EgressPolicyRepo) GetAllPoliciesCallCount() int {
	fake.getAllPoliciesMutex.RLock()
	defer fake.getAllPoliciesMutex.RUnlock()
	return len(fake.getAllPoliciesArgsForCall)
}

func (fake *EgressPolicyRepo) GetAllPoliciesReturns(result1 []store.EgressPolicy, result2 error) {
	fake.GetAllPoliciesStub = nil
	fake.getAllPoliciesReturns = struct {
		result1 []store.EgressPolicy
		result2 error
	}{result1, result2}
}

func (fake *EgressPolicyRepo) GetAllPoliciesReturnsOnCall(i int, result1 []store.EgressPolicy, result2 error) {
	fake.GetAllPoliciesStub = nil
	if fake.getAllPoliciesReturnsOnCall == nil {
		fake.getAllPoliciesReturnsOnCall = make(map[int]struct {
			result1 []store.EgressPolicy
			result2 error
		})
	}
	fake.getAllPoliciesReturnsOnCall[i] = struct {
		result1 []store.EgressPolicy
		result2 error
	}{result1, result2}
}

func (fake *EgressPolicyRepo) GetByFilter(sourceIds []string, sourceTypes []string, destinationIds []string, destinationNames []string, appLifecycles []string) ([]store.EgressPolicy, error) {
	var sourceIdsCopy []string
	if sourceIds != nil {
		sourceIdsCopy = make([]string, len(sourceIds))
		copy(sourceIdsCopy, sourceIds)
	}
	var sourceTypesCopy []string
	if sourceTypes != nil {
		sourceTypesCopy = make([]string, len(sourceTypes))
		copy(sourceTypesCopy, sourceTypes)
	}
	var destinationIdsCopy []string
	if destinationIds != nil {
		destinationIdsCopy = make([]string, len(destinationIds))
		copy(destinationIdsCopy, destinationIds)
	}
	var destinationNamesCopy []string
	if destinationNames != nil {
		destinationNamesCopy = make([]string, len(destinationNames))
		copy(destinationNamesCopy, destinationNames)
	}
	var appLifecyclesCopy []string
	if appLifecycles != nil {
		appLifecyclesCopy = make([]string, len(appLifecycles))
		copy(appLifecyclesCopy, appLifecycles)
	}
	fake.getByFilterMutex.Lock()
	ret, specificReturn := fake.getByFilterReturnsOnCall[len(fake.getByFilterArgsForCall)]
	fake.getByFilterArgsForCall = append(fake.getByFilterArgsForCall, struct {
		sourceIds        []string
		sourceTypes      []string
		destinationIds   []string
		destinationNames []string
		appLifecycles    []string
	}{sourceIdsCopy, sourceTypesCopy, destinationIdsCopy, destinationNamesCopy, appLifecyclesCopy})
	fake.recordInvocation("GetByFilter", []interface{}{sourceIdsCopy, sourceTypesCopy, destinationIdsCopy, destinationNamesCopy, appLifecyclesCopy})
	fake.getByFilterMutex.Unlock()
	if fake.GetByFilterStub != nil {
		return fake.GetByFilterStub(sourceIds, sourceTypes, destinationIds, destinationNames, appLifecycles)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getByFilterReturns.result1, fake.getByFilterReturns.result2
}

func (fake *EgressPolicyRepo) GetByFilterCallCount() int {
	fake.getByFilterMutex.RLock()
	defer fake.getByFilterMutex.RUnlock()
	return len(fake.getByFilterArgsForCall)
}

func (fake *EgressPolicyRepo) GetByFilterArgsForCall(i int) ([]string, []string, []string, []string, []string) {
	fake.getByFilterMutex.RLock()
	defer fake.getByFilterMutex.RUnlock()
	return fake.getByFilterArgsForCall[i].sourceIds, fake.getByFilterArgsForCall[i].sourceTypes, fake.getByFilterArgsForCall[i].destinationIds, fake.getByFilterArgsForCall[i].destinationNames, fake.getByFilterArgsForCall[i].appLifecycles
}

func (fake *EgressPolicyRepo) GetByFilterReturns(result1 []store.EgressPolicy, result2 error) {
	fake.GetByFilterStub = nil
	fake.getByFilterReturns = struct {
		result1 []store.EgressPolicy
		result2 error
	}{result1, result2}
}

func (fake *EgressPolicyRepo) GetByFilterReturnsOnCall(i int, result1 []store.EgressPolicy, result2 error) {
	fake.GetByFilterStub = nil
	if fake.getByFilterReturnsOnCall == nil {
		fake.getByFilterReturnsOnCall = make(map[int]struct {
			result1 []store.EgressPolicy
			result2 error
		})
	}
	fake.getByFilterReturnsOnCall[i] = struct {
		result1 []store.EgressPolicy
		result2 error
	}{result1, result2}
}

func (fake *EgressPolicyRepo) GetBySourceGuidsAndDefaults(ids []string) ([]store.EgressPolicy, error) {
	var idsCopy []string
	if ids != nil {
		idsCopy = make([]string, len(ids))
		copy(idsCopy, ids)
	}
	fake.getBySourceGuidsAndDefaultsMutex.Lock()
	ret, specificReturn := fake.getBySourceGuidsAndDefaultsReturnsOnCall[len(fake.getBySourceGuidsAndDefaultsArgsForCall)]
	fake.getBySourceGuidsAndDefaultsArgsForCall = append(fake.getBySourceGuidsAndDefaultsArgsForCall, struct {
		ids []string
	}{idsCopy})
	fake.recordInvocation("GetBySourceGuidsAndDefaults", []interface{}{idsCopy})
	fake.getBySourceGuidsAndDefaultsMutex.Unlock()
	if fake.GetBySourceGuidsAndDefaultsStub != nil {
		return fake.GetBySourceGuidsAndDefaultsStub(ids)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getBySourceGuidsAndDefaultsReturns.result1, fake.getBySourceGuidsAndDefaultsReturns.result2
}

func (fake *EgressPolicyRepo) GetBySourceGuidsAndDefaultsCallCount() int {
	fake.getBySourceGuidsAndDefaultsMutex.RLock()
	defer fake.getBySourceGuidsAndDefaultsMutex.RUnlock()
	return len(fake.getBySourceGuidsAndDefaultsArgsForCall)
}

func (fake *EgressPolicyRepo) GetBySourceGuidsAndDefaultsArgsForCall(i int) []string {
	fake.getBySourceGuidsAndDefaultsMutex.RLock()
	defer fake.getBySourceGuidsAndDefaultsMutex.RUnlock()
	return fake.getBySourceGuidsAndDefaultsArgsForCall[i].ids
}

func (fake *EgressPolicyRepo) GetBySourceGuidsAndDefaultsReturns(result1 []store.EgressPolicy, result2 error) {
	fake.GetBySourceGuidsAndDefaultsStub = nil
	fake.getBySourceGuidsAndDefaultsReturns = struct {
		result1 []store.EgressPolicy
		result2 error
	}{result1, result2}
}

func (fake *EgressPolicyRepo) GetBySourceGuidsAndDefaultsReturnsOnCall(i int, result1 []store.EgressPolicy, result2 error) {
	fake.GetBySourceGuidsAndDefaultsStub = nil
	if fake.getBySourceGuidsAndDefaultsReturnsOnCall == nil {
		fake.getBySourceGuidsAndDefaultsReturnsOnCall = make(map[int]struct {
			result1 []store.EgressPolicy
			result2 error
		})
	}
	fake.getBySourceGuidsAndDefaultsReturnsOnCall[i] = struct {
		result1 []store.EgressPolicy
		result2 error
	}{result1, result2}
}

func (fake *EgressPolicyRepo) GetByGUID(tx db.Transaction, ids ...string) ([]store.EgressPolicy, error) {
	fake.getByGUIDMutex.Lock()
	ret, specificReturn := fake.getByGUIDReturnsOnCall[len(fake.getByGUIDArgsForCall)]
	fake.getByGUIDArgsForCall = append(fake.getByGUIDArgsForCall, struct {
		tx  db.Transaction
		ids []string
	}{tx, ids})
	fake.recordInvocation("GetByGUID", []interface{}{tx, ids})
	fake.getByGUIDMutex.Unlock()
	if fake.GetByGUIDStub != nil {
		return fake.GetByGUIDStub(tx, ids...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getByGUIDReturns.result1, fake.getByGUIDReturns.result2
}

func (fake *EgressPolicyRepo) GetByGUIDCallCount() int {
	fake.getByGUIDMutex.RLock()
	defer fake.getByGUIDMutex.RUnlock()
	return len(fake.getByGUIDArgsForCall)
}

func (fake *EgressPolicyRepo) GetByGUIDArgsForCall(i int) (db.Transaction, []string) {
	fake.getByGUIDMutex.RLock()
	defer fake.getByGUIDMutex.RUnlock()
	return fake.getByGUIDArgsForCall[i].tx, fake.getByGUIDArgsForCall[i].ids
}

func (fake *EgressPolicyRepo) GetByGUIDReturns(result1 []store.EgressPolicy, result2 error) {
	fake.GetByGUIDStub = nil
	fake.getByGUIDReturns = struct {
		result1 []store.EgressPolicy
		result2 error
	}{result1, result2}
}

func (fake *EgressPolicyRepo) GetByGUIDReturnsOnCall(i int, result1 []store.EgressPolicy, result2 error) {
	fake.GetByGUIDStub = nil
	if fake.getByGUIDReturnsOnCall == nil {
		fake.getByGUIDReturnsOnCall = make(map[int]struct {
			result1 []store.EgressPolicy
			result2 error
		})
	}
	fake.getByGUIDReturnsOnCall[i] = struct {
		result1 []store.EgressPolicy
		result2 error
	}{result1, result2}
}

func (fake *EgressPolicyRepo) DeleteEgressPolicy(tx db.Transaction, egressPolicyGUID string) error {
	fake.deleteEgressPolicyMutex.Lock()
	ret, specificReturn := fake.deleteEgressPolicyReturnsOnCall[len(fake.deleteEgressPolicyArgsForCall)]
	fake.deleteEgressPolicyArgsForCall = append(fake.deleteEgressPolicyArgsForCall, struct {
		tx               db.Transaction
		egressPolicyGUID string
	}{tx, egressPolicyGUID})
	fake.recordInvocation("DeleteEgressPolicy", []interface{}{tx, egressPolicyGUID})
	fake.deleteEgressPolicyMutex.Unlock()
	if fake.DeleteEgressPolicyStub != nil {
		return fake.DeleteEgressPolicyStub(tx, egressPolicyGUID)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.deleteEgressPolicyReturns.result1
}

func (fake *EgressPolicyRepo) DeleteEgressPolicyCallCount() int {
	fake.deleteEgressPolicyMutex.RLock()
	defer fake.deleteEgressPolicyMutex.RUnlock()
	return len(fake.deleteEgressPolicyArgsForCall)
}

func (fake *EgressPolicyRepo) DeleteEgressPolicyArgsForCall(i int) (db.Transaction, string) {
	fake.deleteEgressPolicyMutex.RLock()
	defer fake.deleteEgressPolicyMutex.RUnlock()
	return fake.deleteEgressPolicyArgsForCall[i].tx, fake.deleteEgressPolicyArgsForCall[i].egressPolicyGUID
}

func (fake *EgressPolicyRepo) DeleteEgressPolicyReturns(result1 error) {
	fake.DeleteEgressPolicyStub = nil
	fake.deleteEgressPolicyReturns = struct {
		result1 error
	}{result1}
}

func (fake *EgressPolicyRepo) DeleteEgressPolicyReturnsOnCall(i int, result1 error) {
	fake.DeleteEgressPolicyStub = nil
	if fake.deleteEgressPolicyReturnsOnCall == nil {
		fake.deleteEgressPolicyReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteEgressPolicyReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *EgressPolicyRepo) DeleteApp(tx db.Transaction, terminalID string) error {
	fake.deleteAppMutex.Lock()
	ret, specificReturn := fake.deleteAppReturnsOnCall[len(fake.deleteAppArgsForCall)]
	fake.deleteAppArgsForCall = append(fake.deleteAppArgsForCall, struct {
		tx         db.Transaction
		terminalID string
	}{tx, terminalID})
	fake.recordInvocation("DeleteApp", []interface{}{tx, terminalID})
	fake.deleteAppMutex.Unlock()
	if fake.DeleteAppStub != nil {
		return fake.DeleteAppStub(tx, terminalID)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.deleteAppReturns.result1
}

func (fake *EgressPolicyRepo) DeleteAppCallCount() int {
	fake.deleteAppMutex.RLock()
	defer fake.deleteAppMutex.RUnlock()
	return len(fake.deleteAppArgsForCall)
}

func (fake *EgressPolicyRepo) DeleteAppArgsForCall(i int) (db.Transaction, string) {
	fake.deleteAppMutex.RLock()
	defer fake.deleteAppMutex.RUnlock()
	return fake.deleteAppArgsForCall[i].tx, fake.deleteAppArgsForCall[i].terminalID
}

func (fake *EgressPolicyRepo) DeleteAppReturns(result1 error) {
	fake.DeleteAppStub = nil
	fake.deleteAppReturns = struct {
		result1 error
	}{result1}
}

func (fake *EgressPolicyRepo) DeleteAppReturnsOnCall(i int, result1 error) {
	fake.DeleteAppStub = nil
	if fake.deleteAppReturnsOnCall == nil {
		fake.deleteAppReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteAppReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *EgressPolicyRepo) DeleteSpace(tx db.Transaction, spaceID string) error {
	fake.deleteSpaceMutex.Lock()
	ret, specificReturn := fake.deleteSpaceReturnsOnCall[len(fake.deleteSpaceArgsForCall)]
	fake.deleteSpaceArgsForCall = append(fake.deleteSpaceArgsForCall, struct {
		tx      db.Transaction
		spaceID string
	}{tx, spaceID})
	fake.recordInvocation("DeleteSpace", []interface{}{tx, spaceID})
	fake.deleteSpaceMutex.Unlock()
	if fake.DeleteSpaceStub != nil {
		return fake.DeleteSpaceStub(tx, spaceID)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.deleteSpaceReturns.result1
}

func (fake *EgressPolicyRepo) DeleteSpaceCallCount() int {
	fake.deleteSpaceMutex.RLock()
	defer fake.deleteSpaceMutex.RUnlock()
	return len(fake.deleteSpaceArgsForCall)
}

func (fake *EgressPolicyRepo) DeleteSpaceArgsForCall(i int) (db.Transaction, string) {
	fake.deleteSpaceMutex.RLock()
	defer fake.deleteSpaceMutex.RUnlock()
	return fake.deleteSpaceArgsForCall[i].tx, fake.deleteSpaceArgsForCall[i].spaceID
}

func (fake *EgressPolicyRepo) DeleteSpaceReturns(result1 error) {
	fake.DeleteSpaceStub = nil
	fake.deleteSpaceReturns = struct {
		result1 error
	}{result1}
}

func (fake *EgressPolicyRepo) DeleteSpaceReturnsOnCall(i int, result1 error) {
	fake.DeleteSpaceStub = nil
	if fake.deleteSpaceReturnsOnCall == nil {
		fake.deleteSpaceReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteSpaceReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *EgressPolicyRepo) DeleteDefault(tx db.Transaction, defaultID string) error {
	fake.deleteDefaultMutex.Lock()
	ret, specificReturn := fake.deleteDefaultReturnsOnCall[len(fake.deleteDefaultArgsForCall)]
	fake.deleteDefaultArgsForCall = append(fake.deleteDefaultArgsForCall, struct {
		tx        db.Transaction
		defaultID string
	}{tx, defaultID})
	fake.recordInvocation("DeleteDefault", []interface{}{tx, defaultID})
	fake.deleteDefaultMutex.Unlock()
	if fake.DeleteDefaultStub != nil {
		return fake.DeleteDefaultStub(tx, defaultID)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.deleteDefaultReturns.result1
}

func (fake *EgressPolicyRepo) DeleteDefaultCallCount() int {
	fake.deleteDefaultMutex.RLock()
	defer fake.deleteDefaultMutex.RUnlock()
	return len(fake.deleteDefaultArgsForCall)
}

func (fake *EgressPolicyRepo) DeleteDefaultArgsForCall(i int) (db.Transaction, string) {
	fake.deleteDefaultMutex.RLock()
	defer fake.deleteDefaultMutex.RUnlock()
	return fake.deleteDefaultArgsForCall[i].tx, fake.deleteDefaultArgsForCall[i].defaultID
}

func (fake *EgressPolicyRepo) DeleteDefaultReturns(result1 error) {
	fake.DeleteDefaultStub = nil
	fake.deleteDefaultReturns = struct {
		result1 error
	}{result1}
}

func (fake *EgressPolicyRepo) DeleteDefaultReturnsOnCall(i int, result1 error) {
	fake.DeleteDefaultStub = nil
	if fake.deleteDefaultReturnsOnCall == nil {
		fake.deleteDefaultReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteDefaultReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *EgressPolicyRepo) IsTerminalInUse(tx db.Transaction, terminalGUID string) (bool, error) {
	fake.isTerminalInUseMutex.Lock()
	ret, specificReturn := fake.isTerminalInUseReturnsOnCall[len(fake.isTerminalInUseArgsForCall)]
	fake.isTerminalInUseArgsForCall = append(fake.isTerminalInUseArgsForCall, struct {
		tx           db.Transaction
		terminalGUID string
	}{tx, terminalGUID})
	fake.recordInvocation("IsTerminalInUse", []interface{}{tx, terminalGUID})
	fake.isTerminalInUseMutex.Unlock()
	if fake.IsTerminalInUseStub != nil {
		return fake.IsTerminalInUseStub(tx, terminalGUID)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.isTerminalInUseReturns.result1, fake.isTerminalInUseReturns.result2
}

func (fake *EgressPolicyRepo) IsTerminalInUseCallCount() int {
	fake.isTerminalInUseMutex.RLock()
	defer fake.isTerminalInUseMutex.RUnlock()
	return len(fake.isTerminalInUseArgsForCall)
}

func (fake *EgressPolicyRepo) IsTerminalInUseArgsForCall(i int) (db.Transaction, string) {
	fake.isTerminalInUseMutex.RLock()
	defer fake.isTerminalInUseMutex.RUnlock()
	return fake.isTerminalInUseArgsForCall[i].tx, fake.isTerminalInUseArgsForCall[i].terminalGUID
}

func (fake *EgressPolicyRepo) IsTerminalInUseReturns(result1 bool, result2 error) {
	fake.IsTerminalInUseStub = nil
	fake.isTerminalInUseReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *EgressPolicyRepo) IsTerminalInUseReturnsOnCall(i int, result1 bool, result2 error) {
	fake.IsTerminalInUseStub = nil
	if fake.isTerminalInUseReturnsOnCall == nil {
		fake.isTerminalInUseReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.isTerminalInUseReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *EgressPolicyRepo) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createAppMutex.RLock()
	defer fake.createAppMutex.RUnlock()
	fake.createEgressPolicyMutex.RLock()
	defer fake.createEgressPolicyMutex.RUnlock()
	fake.createDefaultMutex.RLock()
	defer fake.createDefaultMutex.RUnlock()
	fake.createSpaceMutex.RLock()
	defer fake.createSpaceMutex.RUnlock()
	fake.getTerminalByAppGUIDMutex.RLock()
	defer fake.getTerminalByAppGUIDMutex.RUnlock()
	fake.getTerminalBySpaceGUIDMutex.RLock()
	defer fake.getTerminalBySpaceGUIDMutex.RUnlock()
	fake.getAllPoliciesMutex.RLock()
	defer fake.getAllPoliciesMutex.RUnlock()
	fake.getByFilterMutex.RLock()
	defer fake.getByFilterMutex.RUnlock()
	fake.getBySourceGuidsAndDefaultsMutex.RLock()
	defer fake.getBySourceGuidsAndDefaultsMutex.RUnlock()
	fake.getByGUIDMutex.RLock()
	defer fake.getByGUIDMutex.RUnlock()
	fake.deleteEgressPolicyMutex.RLock()
	defer fake.deleteEgressPolicyMutex.RUnlock()
	fake.deleteAppMutex.RLock()
	defer fake.deleteAppMutex.RUnlock()
	fake.deleteSpaceMutex.RLock()
	defer fake.deleteSpaceMutex.RUnlock()
	fake.deleteDefaultMutex.RLock()
	defer fake.deleteDefaultMutex.RUnlock()
	fake.isTerminalInUseMutex.RLock()
	defer fake.isTerminalInUseMutex.RUnlock()
	return fake.invocations
}

func (fake *EgressPolicyRepo) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
