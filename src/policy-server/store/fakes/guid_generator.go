// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"
)

type GUIDGenerator struct {
	NewStub        func() string
	newMutex       sync.RWMutex
	newArgsForCall []struct{}
	newReturns     struct {
		result1 string
	}
	newReturnsOnCall map[int]struct {
		result1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *GUIDGenerator) New() string {
	fake.newMutex.Lock()
	ret, specificReturn := fake.newReturnsOnCall[len(fake.newArgsForCall)]
	fake.newArgsForCall = append(fake.newArgsForCall, struct{}{})
	fake.recordInvocation("New", []interface{}{})
	fake.newMutex.Unlock()
	if fake.NewStub != nil {
		return fake.NewStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.newReturns.result1
}

func (fake *GUIDGenerator) NewCallCount() int {
	fake.newMutex.RLock()
	defer fake.newMutex.RUnlock()
	return len(fake.newArgsForCall)
}

func (fake *GUIDGenerator) NewReturns(result1 string) {
	fake.NewStub = nil
	fake.newReturns = struct {
		result1 string
	}{result1}
}

func (fake *GUIDGenerator) NewReturnsOnCall(i int, result1 string) {
	fake.NewStub = nil
	if fake.newReturnsOnCall == nil {
		fake.newReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.newReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *GUIDGenerator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.newMutex.RLock()
	defer fake.newMutex.RUnlock()
	return fake.invocations
}

func (fake *GUIDGenerator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
